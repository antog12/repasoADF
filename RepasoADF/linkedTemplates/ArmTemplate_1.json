{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "RepasoADF"
		},
		"LinkedService_sales_sales_password": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"password\"de \"LinkedService_sales_sales\""
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"password\"de \"SqlServer1\""
		},
		"LinkedSeevice_DB_repaso_ADF_KV_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "antog12server.database.windows.net"
		},
		"LinkedSeevice_DB_repaso_ADF_KV_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DB-repaso-ADF"
		},
		"LinkedSeevice_DB_repaso_ADF_KV_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "antog12"
		},
		"LinkedServiceADSL_KeyVault_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://almacenadls.dfs.core.windows.net/"
		},
		"LinkedService_sales_sales_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-KMFLPL4"
		},
		"LinkedService_sales_sales_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sales"
		},
		"LinkedService_sales_sales_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-KMFLPL4"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Pruebas"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseRepasoADF",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Pruebas"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_orders_final')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseRepasoADF",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Pruebas"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders_final"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlorders_final')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseRepasoADF",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Pruebas"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders_final"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinoPruebaParams')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Service_ADLS_Origen",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableNombre": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Move and transform activities"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().TableNombre",
							"type": "Expression"
						},
						"folderPath": "Move and transform activities",
						"fileSystem": "dataset"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_Cliente_origen')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Service_ADLS_Origen",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Move and transform activities"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Cliente Nuevos",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Cliente.xlsx",
						"folderPath": "Move and transform activities",
						"fileSystem": "dataset"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Nombre Empresa",
						"type": "String"
					},
					{
						"name": "Nombre Cliente",
						"type": "String"
					},
					{
						"name": "Tipo Cliente",
						"type": "String"
					},
					{
						"name": "Linea",
						"type": "String"
					},
					{
						"name": "Nro Celular",
						"type": "String"
					},
					{
						"name": "Monto",
						"type": "String"
					},
					{
						"name": "Fecha Contratacion",
						"type": "String"
					},
					{
						"name": "Tipo Servicio",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/asql_DB_repaso_adf')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexi√≥n hacia sql",
				"linkedServiceName": {
					"referenceName": "Linked_Service_DB_Origen",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string",
						"defaultValue": "Ventas"
					}
				},
				"folder": {
					"name": "Move and transform activities"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "nombreEmpresa",
						"type": "varchar"
					},
					{
						"name": "nombreCliente",
						"type": "varchar"
					},
					{
						"name": "tipoCliente",
						"type": "varchar"
					},
					{
						"name": "Linea",
						"type": "varchar"
					},
					{
						"name": "NroCelular",
						"type": "varchar"
					},
					{
						"name": "Monto",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "fechaContratacion",
						"type": "date"
					},
					{
						"name": "tipoServicio",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlpruebasorigen')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ASQLprueba",
					"type": "LinkedServiceReference",
					"parameters": {
						"dataBaseNombre": {
							"value": "@dataset().databaseNombre",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"databaseNombre": {
						"type": "string"
					},
					"TableNombre": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Move and transform activities"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": {
						"value": "@dataset().TableNombre",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedSeevice_DB_repaso_ADF_KV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LinkedSeevice_DB_repaso_ADF_KV_properties_typeProperties_server')]",
					"database": "[parameters('LinkedSeevice_DB_repaso_ADF_KV_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LinkedSeevice_DB_repaso_ADF_KV_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedSerevice_KV",
							"type": "LinkedServiceReference"
						},
						"secretName": "ASQL-DB-repaso-ADF"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceADSL_KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LinkedServiceADSL_KeyVault_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedSerevice_KV",
							"type": "LinkedServiceReference"
						},
						"secretName": "DataLake-KeyVault"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedService_sales_sales')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('LinkedService_sales_sales_properties_typeProperties_server')]",
					"database": "[parameters('LinkedService_sales_sales_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('LinkedService_sales_sales_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LinkedService_sales_sales_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Self-Hosted-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Self-Hosted-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCategriaProducto"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "select"
						},
						{
							"name": "aggregate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.Name Categoria, P.Name Producto, OD.UnitPrice, OD.UnitPriceDiscount\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceCategoriaProducto",
						"sourceCategoriaProducto derive(CATEGORIA = upper(Categoria),",
						"          Producto = upper(Producto),",
						"          {Monto Total} = toDecimal(UnitPrice-UnitPriceDiscount)) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          PRODUCTO = Producto,",
						"          CATEGORIA = derivedColumn@CATEGORIA,",
						"          {MONTO TOTAL} = {Monto Total}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select aggregate(groupBy(PRODUCTO,",
						"          CATEGORIA),",
						"     SUMA = sum({MONTO TOTAL}),",
						"          MAX = max({MONTO TOTAL}),",
						"          MIN = min({MONTO TOTAL}),",
						"          AVG = toDecimal(avg({MONTO TOTAL})),",
						"          CONTEO = count({MONTO TOTAL})) ~> aggregate",
						"aggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Aggregate',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['CategoriaProductoAggregate.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCategriaProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Alter Row Insert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmpleadoNuevo"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEmpleadoNuevo"
						}
					],
					"transformations": [
						{
							"name": "alterRowNuevo"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Cargo as string,",
						"          FechaContratacion as date,",
						"          FechaCumpleanio as date,",
						"          Email as string,",
						"          Telefono as string,",
						"          ContactoEmergencia as string,",
						"          ContactoEmergenciaTelefono as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Alter Row',",
						"     fileName: 'EmpleadoNuevo.xlsx',",
						"     sheetName: 'Data',",
						"     firstRowAsHeader: true) ~> sourceEmpleadoNuevo",
						"sourceEmpleadoNuevo alterRow(insertIf(year(FechaContratacion)==2007),",
						"     deleteIf(true())) ~> alterRowNuevo",
						"alterRowNuevo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkEmpleadoNuevo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Alter Row Upsert If')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceAlterRowEmpleadoUpsertIf"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Cargo as string,",
						"          FechaContratacion as date,",
						"          FechaCumpleanio as date,",
						"          Email as string,",
						"          Telefono as string,",
						"          ContactoEmergencia as string,",
						"          ContactoEmergenciaTelefono as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Alter Row',",
						"     fileName: 'EmpleadoNuevo.xlsx',",
						"     sheetName: 'Data',",
						"     firstRowAsHeader: true) ~> sourceAlterRowEmpleadoUpsertIf",
						"sourceAlterRowEmpleadoUpsertIf alterRow(upsertIf(true())) ~> alterRow",
						"alterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['ID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Alter Row')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmpleado"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEmpleado"
						}
					],
					"transformations": [
						{
							"name": "alterRow"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Cargo as string,",
						"          FechaContratacion as date,",
						"          FechaCumpleanio as date,",
						"          Email as string,",
						"          Telefono as string,",
						"          ContactoEmergencia as string,",
						"          ContactoEmergenciaTelefono as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceEmpleado",
						"sourceEmpleado alterRow(deleteIf(Cargo=='Production Technician - WC40'),",
						"     updateIf(Cargo=='Production Technician - WC45')) ~> alterRow",
						"alterRow derive(Cargo = 'REPRESENTANTE DE VENTAS') ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: true,",
						"     upsertable: false,",
						"     keys:['ID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkEmpleado"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional Split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "ProductRed"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductBlue"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductBlack"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkproductotros"
						}
					],
					"transformations": [
						{
							"name": "splitproduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProduct",
						"sourceProduct split(Color=='Red',",
						"     Color=='Blue',",
						"     Color=='Black',",
						"     disjoint: false) ~> splitproduct@(Red, Blue, Black, Otros)",
						"splitproduct@Red sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Conditional Split',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductRed.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> ProductRed",
						"splitproduct@Blue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Conditional Split',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['productBlue.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductBlue",
						"splitproduct@Black sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Conditional Split',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductBlack.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductBlack",
						"splitproduct@Otros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Conditional Split',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductOtros.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkproductotros"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Derived Column')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCategriaProducto"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.Name Categoria, P.Name Producto, OD.UnitPrice, OD.UnitPriceDiscount\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceCategoriaProducto",
						"sourceCategoriaProducto derive(CATEGORIA = upper(Categoria),",
						"          Producto = upper(Producto),",
						"          {Monto Total} = toDecimal(UnitPrice-UnitPriceDiscount)) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Derived Column',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['CategoriaProducto.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCategriaProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCliente"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceServicio"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkClienteExiste"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkclienteNoExist"
						}
					],
					"transformations": [
						{
							"name": "existsCliente",
							"description": "Vamos a ver si el cliente existe en la tabla servicio. hacemos la comparaci√≥n."
						},
						{
							"name": "NotExist",
							"description": "Vamos a vert si el cliente no existe en la tabla servicio"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CodCliente as short,",
						"          Cliente as string,",
						"          ApePatern as string,",
						"          FechaNaci as string,",
						"          DNI as integer,",
						"          IdServicio as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Exist',",
						"     fileName: 'Cliente.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceCliente",
						"source(output(",
						"          IdServicio as short,",
						"          Servicio as string,",
						"          Fecha as date 'dd/MM/yyyy',",
						"          MontoPagar as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Exist',",
						"     fileName: 'Servicios.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceServicio",
						"sourceCliente, sourceServicio exists(sourceCliente@IdServicio == sourceServicio@IdServicio,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsCliente",
						"sourceCliente, sourceServicio exists(sourceCliente@IdServicio == sourceServicio@IdServicio,",
						"     negate:true,",
						"     broadcast: 'auto')~> NotExist",
						"existsCliente sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Exist',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ClienteExists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkClienteExiste",
						"NotExist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Exist',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ClienteNotExit.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkclienteNoExist"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmpleado"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEmpleado"
						}
					],
					"transformations": [
						{
							"name": "parseNombre",
							"description": "Vamos a trabajar con la columna de nombre"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "parseXML"
						},
						{
							"name": "select"
						},
						{
							"name": "filter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          Nombre as string,",
						"          JsonValue as string,",
						"          XmlValue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Parse',",
						"     fileName: 'Empleado.xlsx',",
						"     sheetName: 'Data',",
						"     firstRowAsHeader: true) ~> sourceEmpleado",
						"sourceEmpleado parse(NombreOutPut = Nombre ? (Nombre as string,",
						"          Apellido as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseNombre",
						"parseNombre parse(JsonOutPut = JsonValue ? (Cargo as string,",
						"          FechaContratacion as date,",
						"          FechaCumpleanio as date),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJson",
						"parseJson parse(XmlOutPut = XmlValue ? (Empleado as (Email as string,",
						"          Telefono as string,",
						"          ContactoEmergencia as string,",
						"          ContactoEmergenciaTelefono as string)),",
						"     format: 'xml',",
						"     namespaces: true) ~> parseXML",
						"parseXML select(mapColumn(",
						"          ID,",
						"          Nombre = NombreOutPut.Nombre,",
						"          Apellido = NombreOutPut.Apellido,",
						"          Cargo = JsonOutPut.Cargo,",
						"          FechaContratacion = JsonOutPut.FechaContratacion,",
						"          FechaCumpleanio = JsonOutPut.FechaCumpleanio,",
						"          Email = XmlOutPut.Empleado.Email,",
						"          Telefono = XmlOutPut.Empleado.Telefono,",
						"          ContactoEmergencia = XmlOutPut.Empleado.ContactoEmergencia,",
						"          ContactoEmergenciaTelefono = XmlOutPut.Empleado.ContactoEmergenciaTelefono",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select filter(year(FechaContratacion)>2007) ~> filter",
						"filter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     preSQLs:['truncate table dbo.empleado'],",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Nombre,",
						"          Apellido,",
						"          Cargo,",
						"          FechaContratacion,",
						"          FechaCumpleanio,",
						"          Email,",
						"          Telefono,",
						"          ContactoEmergencia,",
						"          ContactoEmergenciaTelefono",
						"     )) ~> sinkEmpleado"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceFlattenPorLinea"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceFlattenUnico"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceFlattenArray"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkJsonDestino"
						}
					],
					"transformations": [
						{
							"name": "flattenArrayColor",
							"description": "Se usa com matrices(Arrays)"
						},
						{
							"name": "flattenModeloArray"
						},
						{
							"name": "unionJsonLineaUnico"
						},
						{
							"name": "selectJson"
						},
						{
							"name": "unionJsonfinal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Color as string,",
						"          Contacto as (Email as string, Telefono as string),",
						"          Empresa as string,",
						"          Id as string,",
						"          Modelo as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Flatten',",
						"     fileName: 'AutomovilDocumentoPorLinea.json',",
						"     documentForm: 'documentPerLine') ~> sourceFlattenPorLinea",
						"source(output(",
						"          Color as string,",
						"          Contacto as (Email as string, Telefono as string),",
						"          Empresa as string,",
						"          Id as string,",
						"          Modelo as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Flatten',",
						"     fileName: 'AutomovilDocumentoUnico.json',",
						"     documentForm: 'singleDocument') ~> sourceFlattenUnico",
						"source(output(",
						"          Color as string[],",
						"          Contacto as (Email as string, Telefono as string),",
						"          Empresa as string,",
						"          Id as string,",
						"          Modelo as string[]",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Flatten',",
						"     fileName: 'AutomovilMatriz.json',",
						"     documentForm: 'arrayOfDocuments') ~> sourceFlattenArray",
						"sourceFlattenArray foldDown(unroll(Color, Color),",
						"     mapColumn(",
						"          Color,",
						"          Email = Contacto.Email,",
						"          Telefono = Contacto.Telefono,",
						"          Empresa,",
						"          Id,",
						"          Modelo",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenArrayColor",
						"flattenArrayColor foldDown(unroll(Modelo, Modelo),",
						"     mapColumn(",
						"          Color,",
						"          Email,",
						"          Telefono,",
						"          Empresa,",
						"          Id,",
						"          Modelo",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenModeloArray",
						"sourceFlattenPorLinea, sourceFlattenUnico union(byName: true)~> unionJsonLineaUnico",
						"unionJsonLineaUnico select(mapColumn(",
						"          Color,",
						"          Email = Contacto.Email,",
						"          Telefono = Contacto.Telefono,",
						"          Empresa,",
						"          Id,",
						"          Modelo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJson",
						"selectJson, flattenModeloArray union(byName: true)~> unionJsonfinal",
						"unionJsonfinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Automovil',",
						"     preSQLs:['truncate table dbo.Automovil'],",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkJsonDestino"
					]
				}
			},
			"dependsOn": []
		}
	]
}