{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "RepasoADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LookUp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCliente"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceServicios"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkClientesLookUp"
						}
					],
					"transformations": [
						{
							"name": "lookup",
							"description": "BÃºsqueda en \"sourceCliente\" desde \"sourceServicios\".\nEs el equvalente en sql a LEFT | RIGHT JOIN"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CodCliente as short,",
						"          Cliente as string,",
						"          ApePatern as string,",
						"          FechaNaci as string,",
						"          DNI as integer,",
						"          IdServicio as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'LookUp',",
						"     fileName: 'Cliente.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceCliente",
						"source(output(",
						"          IdServicio as short,",
						"          Servicio as string,",
						"          Fecha as date 'dd/MM/yyyy',",
						"          MontoPagar as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'LookUp',",
						"     fileName: 'Servicios.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceServicios",
						"sourceCliente, sourceServicios lookup(sourceCliente@IdServicio == sourceServicios@IdServicio,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'LookUp',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ReporteCliente.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkClientesLookUp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/New Branch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedSevice_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductcsv"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductJson"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from saleslt.product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProduct",
						"sourceProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'New Branch',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Product.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductcsv",
						"sourceProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'New Branch',",
						"     partitionFileNames:['Product.Json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductJson"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCategriaProducto"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.Name Categoria, P.Name Producto, OD.UnitPrice, OD.UnitPriceDiscount\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceCategoriaProducto",
						"sourceCategoriaProducto derive(CATEGORIA = upper(Categoria),",
						"          Producto = upper(Producto),",
						"          {Monto Total} = toDecimal(UnitPrice-UnitPriceDiscount)) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          PRODUCTO = Producto,",
						"          CATEGORIA = derivedColumn@CATEGORIA,",
						"          {MONTO TOTAL} = {Monto Total}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Select',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['CategoriaProductoSelect.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCategriaProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourcemovie1"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie2"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkMOVIE"
						}
					],
					"transformations": [
						{
							"name": "union1",
							"description": "Por posiciÃ³n ya que el orden de los datos es el mismo pero no hay encabezados en movie2"
						},
						{
							"name": "union2",
							"description": "aqui como los encabezados tienen nombre se establecen por name"
						}
					],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     fileName: 'DataSetMovie1.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourcemovie1",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     fileName: 'DataSetMovie2.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> sourceMovie2",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     fileName: 'DataSetMovie3.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceMovie3",
						"sourcemovie1, sourceMovie2 union(byName: false)~> union1",
						"union1, sourceMovie3 union(byName: true)~> union2",
						"union2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['movie.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkMOVIE"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ClienteExcel_a_clienteSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "cargar archivo cliente desde esxcel hacia sql",
				"activities": [
					{
						"name": "Copy cliente hacia sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Nombre Empresa",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nombreEmpresa",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nombre Cliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nombreCliente",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tipo Cliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tipoCliente",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Linea",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Linea",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nro Celular",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NroCelular",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Monto",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Monto",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Fecha Contratacion",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fechaContratacion",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Tipo Servicio",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tipoServicio",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_Cliente_origen",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_DB_repaso_adf",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Move and Transform Activity"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional SPlit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Conditional Split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conditional Split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProduct": {},
									"ProductRed": {},
									"sinkProductBlue": {},
									"sinkProductBlack": {},
									"sinkproductotros": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Derived Column')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowDerived Column",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Derived Column",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoriaProducto": {},
									"sinkCategriaProducto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exits')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowExists",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Exists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCliente": {},
									"sourceServicio": {},
									"sinkClienteExiste": {},
									"sinkclienteNoExist": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Join",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Join",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProducto": {},
									"sourceSubcategoriaProducto": {},
									"sinkProductInnerjoin": {},
									"sinkProductLeftJoin": {},
									"sinkProductRightJoin": {},
									"sinkFullJoin": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookUp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowLookUp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LookUp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCliente": {},
									"sourceServicios": {},
									"sinkClientesLookUp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LookUp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/New Branch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "New Branch",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProduct": {},
									"sinkProductcsv": {},
									"sinkProductJson": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/New Branch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Select')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowSelect",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoriaProducto": {},
									"sinkCategriaProducto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Table_copy_sql_to_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "vamos a copiar las tablas de AW hacia adls mediante parÃ¡metros",
				"activities": [
					{
						"name": "Copy_table_sql_to_adls",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "SalesLT.@{pipeline().parameters.TableName}"
							},
							{
								"name": "Destination",
								"value": "dataset/Move and transform activities/@{\ntoUpper(\n    variables('FileName')\n    )\n}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ASQL_AWDW_Table",
								"type": "DatasetReference",
								"parameters": {
									"DataBaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_almacenadls_table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable File Name",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@{\n    pipeline().parameters.TableName\n}_@{\n    formatDateTime(utcnow(),'yyyyMMdd')\n}.csv",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DatabaseName": {
						"type": "string"
					},
					"TableName": {
						"type": "String"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Move and Transform Activity"
				},
				"annotations": [
					"Exportar tabla a CSV"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Union')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowUnion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Union",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcemovie1": {},
									"sourceMovie2": {},
									"sourceMovie3": {},
									"sinkMOVIE": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Union')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pruebaparam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy pruebas param",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlpruebasorigen",
								"type": "DatasetReference",
								"parameters": {
									"databaseNombre": {
										"value": "@pipeline().parameters.DataBaseNombre",
										"type": "Expression"
									},
									"TableNombre": {
										"value": "@pipeline().parameters.TableNombre",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinoPruebaParams",
								"type": "DatasetReference",
								"parameters": {
									"TableNombre": {
										"value": "@pipeline().parameters.TableNombre",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DataBaseNombre": {
						"type": "string"
					},
					"TableNombre": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Move and Transform Activity"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Primer data flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ABS_Customer",
								"type": "DatasetReference"
							},
							"name": "sinkcustomer"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceCustomer",
						"sourceCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Customer.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkcustomer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Primer Data Flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Primer Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Primer data flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {},
									"sinkcustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Primer data flow')]"
			]
		}
	]
}