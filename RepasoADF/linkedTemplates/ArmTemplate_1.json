{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "RepasoADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmpleado"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEmpleado"
						}
					],
					"transformations": [
						{
							"name": "parseNombre",
							"description": "Vamos a trabajar con la columna de nombre"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "parseXML"
						},
						{
							"name": "select"
						},
						{
							"name": "filter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          Nombre as string,",
						"          JsonValue as string,",
						"          XmlValue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Parse',",
						"     fileName: 'Empleado.xlsx',",
						"     sheetName: 'Data',",
						"     firstRowAsHeader: true) ~> sourceEmpleado",
						"sourceEmpleado parse(NombreOutPut = Nombre ? (Nombre as string,",
						"          Apellido as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseNombre",
						"parseNombre parse(JsonOutPut = JsonValue ? (Cargo as string,",
						"          FechaContratacion as date,",
						"          FechaCumpleanio as date),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJson",
						"parseJson parse(XmlOutPut = XmlValue ? (Empleado as (Email as string,",
						"          Telefono as string,",
						"          ContactoEmergencia as string,",
						"          ContactoEmergenciaTelefono as string)),",
						"     format: 'xml',",
						"     namespaces: true) ~> parseXML",
						"parseXML select(mapColumn(",
						"          ID,",
						"          Nombre = NombreOutPut.Nombre,",
						"          Apellido = NombreOutPut.Apellido,",
						"          Cargo = JsonOutPut.Cargo,",
						"          FechaContratacion = JsonOutPut.FechaContratacion,",
						"          FechaCumpleanio = JsonOutPut.FechaCumpleanio,",
						"          Email = XmlOutPut.Empleado.Email,",
						"          Telefono = XmlOutPut.Empleado.Telefono,",
						"          ContactoEmergencia = XmlOutPut.Empleado.ContactoEmergencia,",
						"          ContactoEmergenciaTelefono = XmlOutPut.Empleado.ContactoEmergenciaTelefono",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select filter(year(FechaContratacion)>2007) ~> filter",
						"filter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     preSQLs:['truncate table dbo.empleado'],",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Nombre,",
						"          Apellido,",
						"          Cargo,",
						"          FechaContratacion,",
						"          FechaCumpleanio,",
						"          Email,",
						"          Telefono,",
						"          ContactoEmergencia,",
						"          ContactoEmergenciaTelefono",
						"     )) ~> sinkEmpleado"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceFlattenPorLinea"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceFlattenUnico"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceFlattenArray"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkJsonDestino"
						}
					],
					"transformations": [
						{
							"name": "flattenArrayColor",
							"description": "Se usa com matrices(Arrays)"
						},
						{
							"name": "flattenModeloArray"
						},
						{
							"name": "unionJsonLineaUnico"
						},
						{
							"name": "selectJson"
						},
						{
							"name": "unionJsonfinal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Color as string,",
						"          Contacto as (Email as string, Telefono as string),",
						"          Empresa as string,",
						"          Id as string,",
						"          Modelo as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Flatten',",
						"     fileName: 'AutomovilDocumentoPorLinea.json',",
						"     documentForm: 'documentPerLine') ~> sourceFlattenPorLinea",
						"source(output(",
						"          Color as string,",
						"          Contacto as (Email as string, Telefono as string),",
						"          Empresa as string,",
						"          Id as string,",
						"          Modelo as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Flatten',",
						"     fileName: 'AutomovilDocumentoUnico.json',",
						"     documentForm: 'singleDocument') ~> sourceFlattenUnico",
						"source(output(",
						"          Color as string[],",
						"          Contacto as (Email as string, Telefono as string),",
						"          Empresa as string,",
						"          Id as string,",
						"          Modelo as string[]",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Flatten',",
						"     fileName: 'AutomovilMatriz.json',",
						"     documentForm: 'arrayOfDocuments') ~> sourceFlattenArray",
						"sourceFlattenArray foldDown(unroll(Color, Color),",
						"     mapColumn(",
						"          Color,",
						"          Email = Contacto.Email,",
						"          Telefono = Contacto.Telefono,",
						"          Empresa,",
						"          Id,",
						"          Modelo",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenArrayColor",
						"flattenArrayColor foldDown(unroll(Modelo, Modelo),",
						"     mapColumn(",
						"          Color,",
						"          Email,",
						"          Telefono,",
						"          Empresa,",
						"          Id,",
						"          Modelo",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenModeloArray",
						"sourceFlattenPorLinea, sourceFlattenUnico union(byName: true)~> unionJsonLineaUnico",
						"unionJsonLineaUnico select(mapColumn(",
						"          Color,",
						"          Email = Contacto.Email,",
						"          Telefono = Contacto.Telefono,",
						"          Empresa,",
						"          Id,",
						"          Modelo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJson",
						"selectJson, flattenModeloArray union(byName: true)~> unionJsonfinal",
						"unionJsonfinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Automovil',",
						"     preSQLs:['truncate table dbo.Automovil'],",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkJsonDestino"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProducto"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSubcategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductInnerjoin"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductLeftJoin"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductRightJoin"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkFullJoin"
						}
					],
					"transformations": [
						{
							"name": "InnerJoin"
						},
						{
							"name": "LeftOuterJoin"
						},
						{
							"name": "RightOuterJoin"
						},
						{
							"name": "FullJoin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductoId as short,",
						"          NombreProducto as string,",
						"          ProductoSubCategoriaId as short,",
						"          Descripcion as string,",
						"          Categoria as string,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Join',",
						"     fileName: 'Producto.xlsx',",
						"     sheetName: 'Producto',",
						"     firstRowAsHeader: true) ~> sourceProducto",
						"source(output(",
						"          SubCategoriaProductoId as short,",
						"          NombreSubCategoria as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Join',",
						"     fileName: 'SubCategoriaProducto.xlsx',",
						"     sheetName: 'SubCategoriaProducto',",
						"     firstRowAsHeader: true) ~> sourceSubcategoriaProducto",
						"sourceProducto, sourceSubcategoriaProducto join(ProductoSubCategoriaId == SubCategoriaProductoId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> InnerJoin",
						"sourceProducto, sourceSubcategoriaProducto join(ProductoSubCategoriaId == SubCategoriaProductoId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftOuterJoin",
						"sourceProducto, sourceSubcategoriaProducto join(ProductoSubCategoriaId == SubCategoriaProductoId,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> RightOuterJoin",
						"sourceProducto, sourceSubcategoriaProducto join(ProductoSubCategoriaId == SubCategoriaProductoId,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FullJoin",
						"InnerJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Join',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductInnerJoin.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductInnerjoin",
						"LeftOuterJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Join',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductLeftJoin.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductLeftJoin",
						"RightOuterJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Join',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductRightJoin.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductRightJoin",
						"FullJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Join',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductFullJoin.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFullJoin"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookUp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCliente"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceServicios"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkClientesLookUp"
						}
					],
					"transformations": [
						{
							"name": "lookup",
							"description": "Búsqueda en \"sourceCliente\" desde \"sourceServicios\".\nEs el equvalente en sql a LEFT | RIGHT JOIN"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CodCliente as short,",
						"          Cliente as string,",
						"          ApePatern as string,",
						"          FechaNaci as string,",
						"          DNI as integer,",
						"          IdServicio as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'LookUp',",
						"     fileName: 'Cliente.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceCliente",
						"source(output(",
						"          IdServicio as short,",
						"          Servicio as string,",
						"          Fecha as date 'dd/MM/yyyy',",
						"          MontoPagar as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'LookUp',",
						"     fileName: 'Servicios.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceServicios",
						"sourceCliente, sourceServicios lookup(sourceCliente@IdServicio == sourceServicios@IdServicio,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'LookUp',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ReporteCliente.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkClientesLookUp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/New Branch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedSevice_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductcsv"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductJson"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from saleslt.product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProduct",
						"sourceProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'New Branch',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Product.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductcsv",
						"sourceProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'New Branch',",
						"     partitionFileNames:['Product.Json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductJson"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmpleado"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabaseRepasoADF",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEmpleado"
						}
					],
					"transformations": [
						{
							"name": "parseNombre",
							"description": "Vamos a trabajar con la columna de nombre"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "parseXML"
						},
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          Nombre as string,",
						"          JsonValue as string,",
						"          XmlValue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Parse',",
						"     fileName: 'Empleado.xlsx',",
						"     sheetName: 'Data',",
						"     firstRowAsHeader: true) ~> sourceEmpleado",
						"sourceEmpleado parse(NombreOutPut = Nombre ? (Nombre as string,",
						"          Apellido as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseNombre",
						"parseNombre parse(JsonOutPut = JsonValue ? (Cargo as string,",
						"          FechaContratacion as date,",
						"          FechaCumpleanio as date),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJson",
						"parseJson parse(XmlOutPut = XmlValue ? (Empleado as (Email as string,",
						"          Telefono as string,",
						"          ContactoEmergencia as string,",
						"          ContactoEmergenciaTelefono as string)),",
						"     format: 'xml',",
						"     namespaces: true) ~> parseXML",
						"parseXML select(mapColumn(",
						"          ID,",
						"          Nombre = NombreOutPut.Nombre,",
						"          Apellido = NombreOutPut.Apellido,",
						"          Cargo = JsonOutPut.Cargo,",
						"          FechaContratacion = JsonOutPut.FechaContratacion,",
						"          FechaCumpleanio = JsonOutPut.FechaCumpleanio,",
						"          Email = XmlOutPut.Empleado.Email,",
						"          Telefono = XmlOutPut.Empleado.Telefono,",
						"          ContactoEmergencia = XmlOutPut.Empleado.ContactoEmergencia,",
						"          ContactoEmergenciaTelefono = XmlOutPut.Empleado.ContactoEmergenciaTelefono",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Empleado',",
						"     preSQLs:['truncate table dbo.empleado'],",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Nombre,",
						"          Apellido,",
						"          Cargo,",
						"          FechaContratacion,",
						"          FechaCumpleanio,",
						"          Email,",
						"          Telefono,",
						"          ContactoEmergencia,",
						"          ContactoEmergenciaTelefono",
						"     )) ~> sinkEmpleado"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDataExportacion"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkPivot"
						}
					],
					"transformations": [
						{
							"name": "pivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Empresas as string,",
						"          Frutas as string,",
						"          Cliente as string,",
						"          {Cantidad (Kg)} as short,",
						"          {Año} as short,",
						"          Pais as string,",
						"          {Precio(kg)} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Pivot',",
						"     fileName: 'DataExportacionEstructurado.xlsx',",
						"     sheetName: 'Data',",
						"     firstRowAsHeader: true) ~> sourceDataExportacion",
						"sourceDataExportacion pivot(groupBy(Empresas,",
						"          Frutas,",
						"          Cliente,",
						"          {Cantidad (Kg)},",
						"          {Año}),",
						"     pivotBy(Pais),",
						"     {} = sum({Precio(kg)}),",
						"     columnNaming: 'Ventas$N_$V(KG)',",
						"     lateral: true) ~> pivot",
						"pivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Pivot',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Pivot.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkPivot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProductoCategoria"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductoCategoria"
						}
					],
					"transformations": [
						{
							"name": "window"
						},
						{
							"name": "rank"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CategoriaID as integer,",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          Cantidad as integer,",
						"          Total as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: '     SELECT PC.ProductCategoryID CategoriaID, PC.Name Categoria, P.Name Producto, OD.UnitPrice, 100 Cantidad,\\n     (OD.UnitPrice*100) Total\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProductoCategoria",
						"sourceProductoCategoria window(over(CategoriaID),",
						"     asc(CategoriaID, true),",
						"     SUM = toDecimal(sum(UnitPrice*Cantidad)),",
						"          AVG = toDecimal(avg(UnitPrice*Cantidad)),",
						"          COUNT = count(UnitPrice*Cantidad),",
						"          MAX = max(UnitPrice*Cantidad),",
						"          MIN = min(UnitPrice*Cantidad)) ~> window",
						"window rank(asc(Total, true),",
						"     caseInsensitive: true,",
						"     output(Ranking as long),",
						"     dense: true) ~> rank",
						"rank sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Ranking',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductoCategoriaRanking.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductoCategoria"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCategriaProducto"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "select"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.Name Categoria, P.Name Producto, OD.UnitPrice, OD.UnitPriceDiscount\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceCategoriaProducto",
						"sourceCategoriaProducto derive(CATEGORIA = upper(Categoria),",
						"          Producto = upper(Producto),",
						"          {Monto Total} = toDecimal(UnitPrice-UnitPriceDiscount)) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          PRODUCTO = Producto,",
						"          CATEGORIA = derivedColumn@CATEGORIA,",
						"          {MONTO TOTAL} = {Monto Total}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Select',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['CategoriaProductoSelect.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCategriaProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Surrogate Key')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCategoriaSurrogateKey"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "select"
						},
						{
							"name": "aggregate"
						},
						{
							"name": "surrogateKey",
							"description": "Agregue una nueva clave ID comenzando por 1 con el paso 1.\nCreamos una nueva columna llamada ID."
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.Name Categoria, P.Name Producto, OD.UnitPrice, OD.UnitPriceDiscount\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceCategoriaProducto",
						"sourceCategoriaProducto derive(CATEGORIA = upper(Categoria),",
						"          Producto = upper(Producto),",
						"          {Monto Total} = toDecimal(UnitPrice-UnitPriceDiscount)) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          PRODUCTO = Producto,",
						"          CATEGORIA = derivedColumn@CATEGORIA,",
						"          {MONTO TOTAL} = {Monto Total}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select aggregate(groupBy(PRODUCTO,",
						"          CATEGORIA),",
						"     SUMA = sum({MONTO TOTAL}),",
						"          MAX = max({MONTO TOTAL}),",
						"          MIN = min({MONTO TOTAL}),",
						"          AVG = toDecimal(avg({MONTO TOTAL})),",
						"          CONTEO = count({MONTO TOTAL})) ~> aggregate",
						"aggregate keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey select(mapColumn(",
						"          ID,",
						"          PRODUCTO,",
						"          CATEGORIA,",
						"          SUMA,",
						"          MAX,",
						"          MIN,",
						"          AVG,",
						"          CONTEO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'SurrogateKey',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['CategoriaProductoAggregate.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCategoriaSurrogateKey"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourcemovie1"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie2"
						},
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkMOVIE"
						}
					],
					"transformations": [
						{
							"name": "union1",
							"description": "Por posición ya que el orden de los datos es el mismo pero no hay encabezados en movie2"
						},
						{
							"name": "union2",
							"description": "aqui como los encabezados tienen nombre se establecen por name"
						}
					],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     fileName: 'DataSetMovie1.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourcemovie1",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     fileName: 'DataSetMovie2.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> sourceMovie2",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     fileName: 'DataSetMovie3.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceMovie3",
						"sourcemovie1, sourceMovie2 union(byName: false)~> union1",
						"union1, sourceMovie3 union(byName: true)~> union2",
						"union2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Union',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['movie.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkMOVIE"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sourceUnpivot"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDataUnpivot"
						}
					],
					"transformations": [
						{
							"name": "unpivot"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Empresas as string,",
						"          Frutas as string,",
						"          Cliente as string,",
						"          {Cantidad (Kg)} as short,",
						"          {Año} as short,",
						"          {Ventas EE.UU. KG} as short,",
						"          {Ventas China KG} as short,",
						"          {Ventas España KG} as short,",
						"          {Ventas Francia KG} as short,",
						"          {Ventas Canada KG} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Unpivot',",
						"     fileName: 'DataExportacionNoEstructurada.xlsx',",
						"     sheetName: 'Data Exportacion',",
						"     firstRowAsHeader: true) ~> sourceUnpivot",
						"sourceUnpivot unpivot(output(",
						"          Pais as string,",
						"          {Precio(KG)} as short",
						"     ),",
						"     ungroupBy(Empresas,",
						"          Frutas,",
						"          Cliente,",
						"          {Cantidad (Kg)},",
						"          {Año}),",
						"     pivotValues: ['Ventas EE.UU. KG', 'Ventas China KG', 'Ventas España KG', 'Ventas Francia KG', 'Ventas Canada KG'],",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivot",
						"unpivot derive(Posicion1 = instr(Pais,' '),",
						"          Posicion2 = instr(Pais,' KG'),",
						"          PAIS = substring(Pais,instr(Pais,' '),instr(Pais,' KG')-instr(Pais,' '))) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          Empresas,",
						"          Frutas,",
						"          Cliente,",
						"          {Cantidad (Kg)},",
						"          {Año},",
						"          Pais = derivedColumn@PAIS,",
						"          {Precio(KG)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Unpivot',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Unpivot.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkDataUnpivot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Window')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Flow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedService_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProductoCategoria"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedService_BlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductoCategoria"
						}
					],
					"transformations": [
						{
							"name": "window"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CategoriaID as integer,",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          Cantidad as integer,",
						"          Total as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: '     SELECT PC.ProductCategoryID CategoriaID, PC.Name Categoria, P.Name Producto, OD.UnitPrice, 100 Cantidad,\\n     (OD.UnitPrice*100) Total\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProductoCategoria",
						"sourceProductoCategoria window(over(CategoriaID),",
						"     asc(CategoriaID, true),",
						"     SUM = toDecimal(sum(UnitPrice*Cantidad)),",
						"          AVG = toDecimal(avg(UnitPrice*Cantidad)),",
						"          COUNT = count(UnitPrice*Cantidad),",
						"          MAX = max(UnitPrice*Cantidad),",
						"          MIN = min(UnitPrice*Cantidad)) ~> window",
						"window sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: 'Window',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductoCategoria.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductoCategoria"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowAggregate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoriaProducto": {},
									"sinkCategriaProducto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ClienteExcel_a_clienteSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "cargar archivo cliente desde esxcel hacia sql",
				"activities": [
					{
						"name": "Copy cliente hacia sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Nombre Empresa",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nombreEmpresa",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nombre Cliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nombreCliente",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tipo Cliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tipoCliente",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Linea",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Linea",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Nro Celular",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NroCelular",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Monto",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Monto",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Fecha Contratacion",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fechaContratacion",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Tipo Servicio",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tipoServicio",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_Cliente_origen",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asql_DB_repaso_adf",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Move and Transform Activity"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional SPlit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Conditional Split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conditional Split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProduct": {},
									"ProductRed": {},
									"sinkProductBlue": {},
									"sinkProductBlack": {},
									"sinkproductotros": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Derived Column')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowDerived Column",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Derived Column",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoriaProducto": {},
									"sinkCategriaProducto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exits')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowExists",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Exists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCliente": {},
									"sourceServicio": {},
									"sinkClienteExiste": {},
									"sinkclienteNoExist": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowFilter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmpleado": {},
									"sinkEmpleado": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowFlatten",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Flatten",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceFlattenPorLinea": {},
									"sourceFlattenUnico": {},
									"sourceFlattenArray": {},
									"sinkJsonDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Flatten')]"
			]
		}
	]
}