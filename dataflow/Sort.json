{
	"name": "Sort",
	"properties": {
		"folder": {
			"name": "Data Flow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LinkedService_BlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceEmpleado"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabaseRepasoADF",
						"type": "LinkedServiceReference"
					},
					"name": "sinkEmpleado"
				}
			],
			"transformations": [
				{
					"name": "parseNombre",
					"description": "Vamos a trabajar con la columna de nombre"
				},
				{
					"name": "parseJson"
				},
				{
					"name": "parseXML"
				},
				{
					"name": "select"
				},
				{
					"name": "filter"
				},
				{
					"name": "sort"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as short,",
				"          Nombre as string,",
				"          JsonValue as string,",
				"          XmlValue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     container: 'dataflowdataset',",
				"     folderPath: 'Parse',",
				"     fileName: 'Empleado.xlsx',",
				"     sheetName: 'Data',",
				"     firstRowAsHeader: true) ~> sourceEmpleado",
				"sourceEmpleado parse(NombreOutPut = Nombre ? (Nombre as string,",
				"          Apellido as string),",
				"     format: 'delimited',",
				"     columnNamesAsHeader: false,",
				"     columnDelimiter: '|',",
				"     nullValue: '') ~> parseNombre",
				"parseNombre parse(JsonOutPut = JsonValue ? (Cargo as string,",
				"          FechaContratacion as date,",
				"          FechaCumpleanio as date),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parseJson",
				"parseJson parse(XmlOutPut = XmlValue ? (Empleado as (Email as string,",
				"          Telefono as string,",
				"          ContactoEmergencia as string,",
				"          ContactoEmergenciaTelefono as string)),",
				"     format: 'xml',",
				"     namespaces: true) ~> parseXML",
				"parseXML select(mapColumn(",
				"          ID,",
				"          Nombre = NombreOutPut.Nombre,",
				"          Apellido = NombreOutPut.Apellido,",
				"          Cargo = JsonOutPut.Cargo,",
				"          FechaContratacion = JsonOutPut.FechaContratacion,",
				"          FechaCumpleanio = JsonOutPut.FechaCumpleanio,",
				"          Email = XmlOutPut.Empleado.Email,",
				"          Telefono = XmlOutPut.Empleado.Telefono,",
				"          ContactoEmergencia = XmlOutPut.Empleado.ContactoEmergencia,",
				"          ContactoEmergenciaTelefono = XmlOutPut.Empleado.ContactoEmergenciaTelefono",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select filter(year(FechaContratacion)>2007) ~> filter",
				"filter sort(asc(ID, true)) ~> sort",
				"sort sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Empleado',",
				"     preSQLs:['truncate table dbo.empleado'],",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID,",
				"          Nombre,",
				"          Apellido,",
				"          Cargo,",
				"          FechaContratacion,",
				"          FechaCumpleanio,",
				"          Email,",
				"          Telefono,",
				"          ContactoEmergencia,",
				"          ContactoEmergenciaTelefono",
				"     )) ~> sinkEmpleado"
			]
		}
	}
}